/**
 * GRAX API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RecordDeleted from './RecordDeleted';
import RecordField from './RecordField';
import RecordPurged from './RecordPurged';
import RecordRestoredFrom from './RecordRestoredFrom';

/**
 * The Record model module.
 * @module model/Record
 * @version 0.0.1
 */
class Record {
    /**
     * Constructs a new <code>Record</code>.
     * @alias module:model/Record
     */
    constructor() { 
        
        Record.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Record</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Record} obj Optional instance to populate.
     * @return {module:model/Record} The populated <code>Record</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Record();

            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = RecordDeleted.constructFromObject(data['deleted']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [RecordField]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('purged')) {
                obj['purged'] = RecordPurged.constructFromObject(data['purged']);
            }
            if (data.hasOwnProperty('restoredFrom')) {
                obj['restoredFrom'] = RecordRestoredFrom.constructFromObject(data['restoredFrom']);
            }
            if (data.hasOwnProperty('salesforceURL')) {
                obj['salesforceURL'] = ApiClient.convertToType(data['salesforceURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Record</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Record</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deleted`
        if (data['deleted']) { // data not null
          RecordDeleted.validateJSON(data['deleted']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                RecordField.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['object'] && !(typeof data['object'] === 'string' || data['object'] instanceof String)) {
            throw new Error("Expected the field `object` to be a primitive type in the JSON string but got " + data['object']);
        }
        // validate the optional field `purged`
        if (data['purged']) { // data not null
          RecordPurged.validateJSON(data['purged']);
        }
        // validate the optional field `restoredFrom`
        if (data['restoredFrom']) { // data not null
          RecordRestoredFrom.validateJSON(data['restoredFrom']);
        }
        // ensure the json data is a string
        if (data['salesforceURL'] && !(typeof data['salesforceURL'] === 'string' || data['salesforceURL'] instanceof String)) {
            throw new Error("Expected the field `salesforceURL` to be a primitive type in the JSON string but got " + data['salesforceURL']);
        }

        return true;
    }


}



/**
 * @member {module:model/RecordDeleted} deleted
 */
Record.prototype['deleted'] = undefined;

/**
 * Record fields.
 * @member {Array.<module:model/RecordField>} fields
 */
Record.prototype['fields'] = undefined;

/**
 * Record ID.
 * @member {String} id
 */
Record.prototype['id'] = undefined;

/**
 * Time the record was modified.
 * @member {Date} modified
 */
Record.prototype['modified'] = undefined;

/**
 * Record name.
 * @member {String} name
 */
Record.prototype['name'] = undefined;

/**
 * Object name.
 * @member {String} object
 */
Record.prototype['object'] = undefined;

/**
 * @member {module:model/RecordPurged} purged
 */
Record.prototype['purged'] = undefined;

/**
 * @member {module:model/RecordRestoredFrom} restoredFrom
 */
Record.prototype['restoredFrom'] = undefined;

/**
 * Salesforce URL for the record.
 * @member {String} salesforceURL
 */
Record.prototype['salesforceURL'] = undefined;






export default Record;

