/*
 * GRAX API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import SearchFieldFilter from './SearchFieldFilter';

/**
 * The SearchFilters model module.
 * @module model/SearchFilters
 * @version 0.0.1
 */
export default class SearchFilters {
  /**
   * Constructs a new <code>SearchFilters</code>.
   * @alias module:model/SearchFilters
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>SearchFilters</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SearchFilters} obj Optional instance to populate.
   * @return {module:model/SearchFilters} The populated <code>SearchFilters</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SearchFilters();
      if (data.hasOwnProperty('children'))
        obj.children = ApiClient.convertToType(data['children'], [SearchFilters]);
      if (data.hasOwnProperty('fields'))
        obj.fields = ApiClient.convertToType(data['fields'], [SearchFieldFilter]);
      if (data.hasOwnProperty('mode'))
        obj.mode = ApiClient.convertToType(data['mode'], 'String');
    }
    return obj;
  }
}

/**
 * Child filters.
 * @member {Array.<module:model/SearchFilters>} children
 */
SearchFilters.prototype.children = undefined;

/**
 * Field filters.
 * @member {Array.<module:model/SearchFieldFilter>} fields
 */
SearchFilters.prototype.fields = undefined;

/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
SearchFilters.ModeEnum = {
  /**
   * value: "and"
   * @const
   */
  and: "and",

  /**
   * value: "or"
   * @const
   */
  or: "or"
};
/**
 * Mode of the filter. 'and' requires all child and field filters match, 'or' only requires one.
 * @member {module:model/SearchFilters.ModeEnum} mode
 */
SearchFilters.prototype.mode = undefined;

