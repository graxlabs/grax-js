/*
 * GRAX API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Search from '../model/Search';
import SearchCreate from '../model/SearchCreate';
import SearchRecordsPage from '../model/SearchRecordsPage';
import SearchesPage from '../model/SearchesPage';

/**
* Search service.
* @module api/SearchApi
* @version 0.0.1
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the searchAbort operation.
     * @callback moduleapi/SearchApi~searchAbortCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Abort search
     * @param {String} id ID of the search job.
     * @param {module:api/SearchApi~searchAbortCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchAbort(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchAbort");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/searches/{id}/abort', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchCreate operation.
     * @callback moduleapi/SearchApi~searchCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Search{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create search
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchCreate} opts.body 
     * @param {module:api/SearchApi~searchCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Search;

      return this.apiClient.callApi(
        '/api/v2/searches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchDelete operation.
     * @callback moduleapi/SearchApi~searchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete search
     * @param {String} id 
     * @param {module:api/SearchApi~searchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchDelete(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/searches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchDownload operation.
     * @callback moduleapi/SearchApi~searchDownloadCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download search results
     * @param {String} id ID of the search job.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Fields to include in the response. If not specified, all fields are included.
     * @param {Boolean} opts.latest Whether to download the latest version of each record.
     * @param {module:api/SearchApi~searchDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchDownload(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchDownload");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],'latest': opts['latest']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/zip'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/v2/searches/{id}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchGet operation.
     * @callback moduleapi/SearchApi~searchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Search{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get search
     * @param {String} id 
     * @param {module:api/SearchApi~searchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Search;

      return this.apiClient.callApi(
        '/api/v2/searches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchRecords operation.
     * @callback moduleapi/SearchApi~searchRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchRecordsPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read search result records
     * @param {String} id ID of the search job.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Fields to include in the response. Can be &#x27;all&#x27; for all fields, &#x27;name&#x27; for the name field, or a comma separated list of field names.
     * @param {Boolean} opts.reverse Search records in reverse order.
     * @param {Date} opts.minTime Minimum record time to include in the response.
     * @param {Number} opts.maxItems Maximum number of items to return per page. Fewer or zero may be returned.
     * @param {String} opts.pageToken Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/SearchApi~searchRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchRecords(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchRecords");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],'reverse': opts['reverse'],'minTime': opts['minTime'],'maxItems': opts['maxItems'],'pageToken': opts['pageToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchRecordsPage;

      return this.apiClient.callApi(
        '/api/v2/searches/{id}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the searchesList operation.
     * @callback moduleapi/SearchApi~searchesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchesPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List searches
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxItems Maximum number of items to return per page. Fewer or zero may be returned.
     * @param {String} opts.pageToken Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/SearchApi~searchesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'maxItems': opts['maxItems'],'pageToken': opts['pageToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchesPage;

      return this.apiClient.callApi(
        '/api/v2/searches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}