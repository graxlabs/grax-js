/*
 * GRAX API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.54
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Record from '../model/Record';
import RecordChildrenPage from '../model/RecordChildrenPage';
import RecordVersionsPage from '../model/RecordVersionsPage';

/**
* Records service.
* @module api/RecordsApi
* @version 0.0.1
*/
export default class RecordsApi {

    /**
    * Constructs a new RecordsApi. 
    * @alias module:api/RecordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the recordChildrenList operation.
     * @callback moduleapi/RecordsApi~recordChildrenListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordChildrenPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List record children
     * @param {String} orgID 
     * @param {String} _object 
     * @param {String} id 
     * @param {String} mod 
     * @param {Object} opts Optional parameters
     * @param {String} opts._object The child object to list.
     * @param {String} opts.fields The fields to include in the response. Can be &#x27;all&#x27; for all fields, &#x27;name&#x27; for the name field, or a comma separated list of field names.
     * @param {String} opts.deleteSource The delete source to filter by, can be &#x27;any&#x27;, &#x27;grax&#x27; or &#x27;salesforce&#x27;.
     * @param {Number} opts.pageSize Maximum number of results to return per page.
     * @param {String} opts.pageToken Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/RecordsApi~recordChildrenListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    recordChildrenList(orgID, _object, id, mod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling recordChildrenList");
      }
      // verify the required parameter '_object' is set
      if (_object === undefined || _object === null) {
        throw new Error("Missing the required parameter '_object' when calling recordChildrenList");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordChildrenList");
      }
      // verify the required parameter 'mod' is set
      if (mod === undefined || mod === null) {
        throw new Error("Missing the required parameter 'mod' when calling recordChildrenList");
      }

      let pathParams = {
        'orgID': orgID,'object': _object,'id': id,'mod': mod
      };
      let queryParams = {
        'object': opts['_object'],'fields': opts['fields'],'deleteSource': opts['deleteSource'],'pageSize': opts['pageSize'],'pageToken': opts['pageToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordChildrenPage;

      return this.apiClient.callApi(
        '/api/v1/salesforce/{orgID}/objects/{object}/records/{id}/versions/{mod}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the recordGet operation.
     * @callback moduleapi/RecordsApi~recordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Record{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get record
     * @param {String} _object Object name.
     * @param {String} id ID of the record.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Fields to include in the response. Can be &#x27;all&#x27; for all fields, &#x27;name&#x27; for the name field, or a comma separated list of field names.
     * @param {module:api/RecordsApi~recordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    recordGet(_object, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter '_object' is set
      if (_object === undefined || _object === null) {
        throw new Error("Missing the required parameter '_object' when calling recordGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordGet");
      }

      let pathParams = {
        'object': _object,'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Record;

      return this.apiClient.callApi(
        '/api/v2/objects/{object}/records/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the recordVersionsList operation.
     * @callback moduleapi/RecordsApi~recordVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordVersionsPage{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List record versions
     * @param {String} _object Object name.
     * @param {String} id ID of the record.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Fields to include in the response. Can be &#x27;all&#x27; for all fields, &#x27;name&#x27; for the name field, or a comma separated list of field names.
     * @param {Number} opts.maxItems Maximum number of items to return per page. Fewer or zero may be returned.
     * @param {String} opts.pageToken Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/RecordsApi~recordVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    recordVersionsList(_object, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter '_object' is set
      if (_object === undefined || _object === null) {
        throw new Error("Missing the required parameter '_object' when calling recordVersionsList");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordVersionsList");
      }

      let pathParams = {
        'object': _object,'id': id
      };
      let queryParams = {
        'fields': opts['fields'],'maxItems': opts['maxItems'],'pageToken': opts['pageToken']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordVersionsPage;

      return this.apiClient.callApi(
        '/api/v2/objects/{object}/records/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}