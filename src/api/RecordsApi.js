/**
 * GRAX API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Record from '../model/Record';
import RecordChildrenPage from '../model/RecordChildrenPage';
import RecordVersionsPage from '../model/RecordVersionsPage';

/**
* Records service.
* @module api/RecordsApi
* @version 0.0.1
*/
export default class RecordsApi {

    /**
    * Constructs a new RecordsApi. 
    * @alias module:api/RecordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recordChildrenList operation.
     * @callback module:api/RecordsApi~recordChildrenListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordChildrenPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List record children
     * @param {String} orgID 
     * @param {String} object2 
     * @param {String} id 
     * @param {String} mod 
     * @param {Object} opts Optional parameters
     * @param {String} [object] The child object to list.
     * @param {String} [fields] The fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
     * @param {String} [deleteSource] The delete source to filter by, can be 'any', 'grax' or 'salesforce'.
     * @param {Number} [pageSize] Maximum number of results to return per page.
     * @param {String} [pageToken] Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/RecordsApi~recordChildrenListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordChildrenPage}
     */
    recordChildrenList(orgID, object2, id, mod, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orgID' is set
      if (orgID === undefined || orgID === null) {
        throw new Error("Missing the required parameter 'orgID' when calling recordChildrenList");
      }
      // verify the required parameter 'object2' is set
      if (object2 === undefined || object2 === null) {
        throw new Error("Missing the required parameter 'object2' when calling recordChildrenList");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordChildrenList");
      }
      // verify the required parameter 'mod' is set
      if (mod === undefined || mod === null) {
        throw new Error("Missing the required parameter 'mod' when calling recordChildrenList");
      }

      let pathParams = {
        'orgID': orgID,
        'object': object2,
        'id': id,
        'mod': mod
      };
      let queryParams = {
        'object': opts['object'],
        'fields': opts['fields'],
        'deleteSource': opts['deleteSource'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordChildrenPage;
      return this.apiClient.callApi(
        '/api/v1/salesforce/{orgID}/objects/{object}/records/{id}/versions/{mod}/children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordGet operation.
     * @callback module:api/RecordsApi~recordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Record} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get record
     * @param {String} object Object name.
     * @param {String} id ID of the record.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
     * @param {module:api/RecordsApi~recordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Record}
     */
    recordGet(object, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling recordGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordGet");
      }

      let pathParams = {
        'object': object,
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Record;
      return this.apiClient.callApi(
        '/api/v2/objects/{object}/records/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordVersionsList operation.
     * @callback module:api/RecordsApi~recordVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordVersionsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List record versions
     * @param {String} object Object name.
     * @param {String} id ID of the record.
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
     * @param {Number} [maxItems] Maximum number of items to return per page. Fewer or zero may be returned.
     * @param {String} [pageToken] Token returned by previous call to retrieve the subsequent page.
     * @param {module:api/RecordsApi~recordVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordVersionsPage}
     */
    recordVersionsList(object, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'object' is set
      if (object === undefined || object === null) {
        throw new Error("Missing the required parameter 'object' when calling recordVersionsList");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling recordVersionsList");
      }

      let pathParams = {
        'object': object,
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'maxItems': opts['maxItems'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordVersionsPage;
      return this.apiClient.callApi(
        '/api/v2/objects/{object}/records/{id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
