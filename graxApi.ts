/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * GRAX API
 * OpenAPI spec version: 0.0.1
 */
import { instance } from './instance';
export type SearchRecordsParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * Search records in reverse order.
 */
reverse?: boolean;
/**
 * Minimum record time to include in the response.
 */
minTime?: string;
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type SearchDownloadParams = {
/**
 * Fields to include in the response. If not specified, all fields are included.
 */
fields?: string;
/**
 * Whether to download the latest version of each record.
 */
latest?: boolean;
};

export type SearchesListParams = {
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordVersionsListParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordGetParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
};

export type ObjectsListParams = {
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordsUnlockBody = {
  /** @nullable */
  ids?: string[] | null;
};

export type RecordChildrenListParams = {
/**
 * The child object to list.
 */
object?: string;
/**
 * The fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * The delete source to filter by, can be 'any', 'grax' or 'salesforce'.
 */
deleteSource?: string;
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordsLockBody = {
  /** @nullable */
  ids?: RecordLockID[] | null;
};

export type DeletionRecordsListParams = {
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type DeletionsListParams = {
/**
 * Minimum created time, inclusive.
 */
min?: string;
/**
 * Maximum created time, exclusive.
 */
max?: string;
/**
 * Object name. If provided, only deletions for this object will be returned.
 */
object?: string;
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type BackupsHealthGetParams = {
/**
 * Maximum time behind before the backups are considered unhealthy, in seconds.
 */
maxBehind?: number;
};

export interface SearchesPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  searches?: Search[];
}

export interface SearchRecordsPage {
  /** Token to retrieve the next page of running search results. */
  nextContinuePageToken?: string;
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  records?: SearchRecord[];
}

export interface SearchLimits {
  /** Stop search after this many results are found. */
  results?: number;
}

/**
 * Mode of the filter. 'and' requires all child and field filters match, 'or' only requires one.
 */
export type SearchFiltersMode = typeof SearchFiltersMode[keyof typeof SearchFiltersMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchFiltersMode = {
  and: 'and',
  or: 'or',
} as const;

export interface SearchFieldFilter {
  field?: string;
  filterType?: string;
  not?: boolean;
  value?: string;
}

export interface SearchFilters {
  /** Child filters. */
  children?: SearchFilters[];
  /** Field filters. */
  fields?: SearchFieldFilter[];
  /** Mode of the filter. 'and' requires all child and field filters match, 'or' only requires one. */
  mode?: SearchFiltersMode;
}

export interface SearchCreate {
  filters?: SearchFilters;
  limits?: SearchLimits;
  /** Whether to notify when the search is complete. */
  notify?: boolean;
  /** Object to search. */
  object?: string;
  /** Whether to search in reverse order. */
  reverse?: boolean;
  /** Status of the records to search. */
  status?: string;
  /** Time field to search. Can be 'createdAt', 'modifiedAt', 'latestModifiedAt', 'rangeLatestModifiedAt', 'allModifiedAt', 'deletedAt' or 'purgedAt'. Defaults to 'createdAt'. */
  timeField?: string;
  /** Maximum time for the search. */
  timeFieldMax?: string;
  /** Minimum time for the search. */
  timeFieldMin?: string;
}

export interface Search {
  /** Time the search job was created. */
  created?: string;
  /** Time the search will be automatically deleted if its results are not accessed. */
  deleting?: string;
  filters?: SearchFilters;
  /** Status of the records to search. */
  filterStatus?: string;
  /** ID of the search job. */
  id?: string;
  limits?: SearchLimits;
  /** Name of the search job. */
  name?: string;
  /** Object searched. */
  object?: string;
  /** Progress of the search job. */
  progress?: number;
  /** Number of records found. */
  recordsFound?: number;
  /** Number of records scanned. */
  recordsScanned?: number;
  /** Time of the first found record. */
  recordsTimeFirst?: string;
  /** Time of the last found record. */
  recordsTimeLast?: string;
  /** Whether records were searched in reverse order. */
  reverse?: boolean;
  /** Status of the search job. */
  status?: string;
  /** Time field used for the search. Can be 'createdAt', 'modifiedAt', 'latestModifiedAt', 'rangeLatestModifiedAt', 'allModifiedAt', 'deletedAt' or 'purgedAt'. */
  timeField?: string;
  /** Maximum time for the search. */
  timeFieldMax?: string;
  /** Minimum time for the search. */
  timeFieldMin?: string;
  /** Time the search job was last updated. */
  updated?: string;
}

export interface RecordVersionsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** Record versions. */
  records?: Record[];
}

export interface RecordRestoredFrom {
  /** Activity ID that restored the record. */
  activityID?: string;
  /** Added time of the new record. */
  added?: string;
  /** ID of the original record. */
  id?: string;
  /** Modified time of the original record. */
  modified?: string;
  user?: AuditUser;
}

export interface RecordPurged {
  /** ID of the activity that purged the record. */
  activityID?: string;
  /** Time the record was purged. */
  time?: string;
  user?: AuditUser;
}

export interface RecordLockID {
  id?: string;
  note?: string;
}

export interface RecordLock {
  /** Time the record was locked. If not present, the record is not locked. */
  locked?: string;
  /** ID of the record causing this record to be locked */
  lockedID?: string;
  /** Note about the lock */
  note?: string;
  /** ID of the user who locked the record */
  userID?: string;
}

export interface RecordField {
  /** Field name. */
  name?: string;
  /** Field value. */
  value?: string;
}

/**
 * Source of the delete.
 */
export type RecordDeletedSource = typeof RecordDeletedSource[keyof typeof RecordDeletedSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordDeletedSource = {
  grax: 'grax',
  source: 'source',
} as const;

export interface RecordDeleted {
  /** ID of the activity that deleted the record. */
  activityID?: string;
  /** Source of the delete. */
  source?: RecordDeletedSource;
  /** Time the record was deleted. */
  time?: string;
  user?: AuditUser;
}

export interface SearchRecord {
  /** Time the record was created. */
  created?: string;
  deleted?: RecordDeleted;
  /** Record fields. */
  fields?: RecordField[];
  /** Record ID. */
  id?: string;
  /** Time the record was modified. */
  modified?: string;
  /** Record name. */
  name?: string;
  purged?: RecordPurged;
  restoredFrom?: RecordRestoredFrom;
  /** Salesforce URL for the record. */
  salesforceURL?: string;
}

export interface RecordChildrenPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** @nullable */
  records?: ChildRecord[] | null;
}

export interface Record {
  deleted?: RecordDeleted;
  /** Record fields. */
  fields?: RecordField[];
  /** Record ID. */
  id?: string;
  /** Time the record was modified. */
  modified?: string;
  /** Record name. */
  name?: string;
  /** Object name. */
  object?: string;
  purged?: RecordPurged;
  restoredFrom?: RecordRestoredFrom;
  /** Salesforce URL for the record. */
  salesforceURL?: string;
}

export interface Object {
  /** Object label. */
  label?: string;
  /** Object name. */
  name?: string;
}

export interface ObjectsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** Objects. */
  objects?: Object[];
}

export interface ErrorBody {
  id?: string;
  message?: string;
}

export interface Error {
  error?: ErrorBody;
}

export interface DeletionsPage {
  /** @nullable */
  deletions?: Deletion[] | null;
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
}

export interface DeletionRecord {
  id?: string;
  modifiedAt?: string;
  object?: string;
  purgedAt?: string;
}

export interface DeletionRecordsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** @nullable */
  records?: DeletionRecord[] | null;
}

export type DeletionCallerHeaders = {[key: string]: string[]};

export interface DeletionCaller {
  headers?: DeletionCallerHeaders;
  remoteAddr?: string;
  userID?: string;
}

export interface Deletion {
  caller?: DeletionCaller;
  cascade?: boolean;
  createdAt?: string;
  forceCascadeObjects?: string[];
  id?: string;
  object?: string;
  skipDeletedCheck?: boolean;
}

/**
 * The fields of the record, if requested.
 */
export type ChildRecordFields = {[key: string]: string};

export interface ChildRecord {
  /** The time the record was deleted, if it has been deleted. */
  deletedAt?: string;
  /** The delete source of the record, if it has been deleted. Can be 'grax' or 'salesforce'. */
  deleteSource?: string;
  /** The fields of the record, if requested. */
  fields?: ChildRecordFields;
  /** The ID of the record. */
  id?: string;
  /** The time the record was last modified. */
  modifiedAt?: string;
  /** The name of the record, if requested. */
  name?: string;
  /** The object of the record. */
  object?: string;
  /** The Salesforce URL of the record. */
  salesforceURL?: string;
}

export type BackupsHealthStatus = typeof BackupsHealthStatus[keyof typeof BackupsHealthStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BackupsHealthStatus = {
  ok: 'ok',
  warning: 'warning',
  error: 'error',
  unknown: 'unknown',
} as const;

export interface BackupsHealth {
  status?: BackupsHealthStatus;
}

export interface AuditUser {
  /** The email of the user. */
  email?: string;
  /** The ID of the user. */
  id?: string;
  /** The username of the user. */
  name?: string;
}





  /**
 * Get the health of Auto Backup.
 * @summary Get Auto Backup health
 */
export const backupsHealthGet = (
    params?: BackupsHealthGetParams,
 ) => {
      return instance<BackupsHealth>(
      {url: `/api/v1/backups/health`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary List Delete Forever deletions
 */
export const deletionsList = (
    orgID: string,
    params?: DeletionsListParams,
 ) => {
      return instance<DeletionsPage>(
      {url: `/api/v1/salesforce/${orgID}/deletions`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Get Delete Forever deletion
 */
export const deletionGet = (
    orgID: string,
    id: string,
 ) => {
      return instance<Deletion>(
      {url: `/api/v1/salesforce/${orgID}/deletions/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary List Delete Forever deletion records
 */
export const deletionRecordsList = (
    orgID: string,
    id: string,
    params?: DeletionRecordsListParams,
 ) => {
      return instance<DeletionRecordsPage>(
      {url: `/api/v1/salesforce/${orgID}/deletions/${id}/records`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Lock multiple records
 */
export const recordsLock = (
    orgID: string,
    object: string,
    recordsLockBody: RecordsLockBody,
 ) => {
      return instance<void>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/lock`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: recordsLockBody
    },
      );
    }
  
/**
 * @summary Unlock single record
 */
export const recordUnlock = (
    orgID: string,
    object: string,
    id: string,
 ) => {
      return instance<void>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Get record lock
 */
export const recordLockGet = (
    orgID: string,
    object: string,
    id: string,
 ) => {
      return instance<RecordLock>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Lock single record
 */
export const recordLock = (
    orgID: string,
    object: string,
    id: string,
 ) => {
      return instance<void>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`, method: 'POST'
    },
      );
    }
  
/**
 * @summary List record children
 */
export const recordChildrenList = (
    orgID: string,
    object: string,
    id: string,
    mod: string,
    params?: RecordChildrenListParams,
 ) => {
      return instance<RecordChildrenPage>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/versions/${mod}/children`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Unlock multiple records
 */
export const recordsUnlock = (
    orgID: string,
    object: string,
    recordsUnlockBody: RecordsUnlockBody,
 ) => {
      return instance<void>(
      {url: `/api/v1/salesforce/${orgID}/objects/${object}/unlock`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: recordsUnlockBody
    },
      );
    }
  
/**
 * @summary List objects
 */
export const objectsList = (
    params?: ObjectsListParams,
 ) => {
      return instance<ObjectsPage>(
      {url: `/api/v2/objects`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Get record
 */
export const recordGet = (
    object: string,
    id: string,
    params?: RecordGetParams,
 ) => {
      return instance<Record>(
      {url: `/api/v2/objects/${object}/records/${id}`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary List record versions
 */
export const recordVersionsList = (
    object: string,
    id: string,
    params?: RecordVersionsListParams,
 ) => {
      return instance<RecordVersionsPage>(
      {url: `/api/v2/objects/${object}/records/${id}/versions`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary List searches
 */
export const searchesList = (
    params?: SearchesListParams,
 ) => {
      return instance<SearchesPage>(
      {url: `/api/v2/searches`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Create search
 */
export const searchCreate = (
    searchCreate: SearchCreate,
 ) => {
      return instance<Search>(
      {url: `/api/v2/searches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: searchCreate
    },
      );
    }
  
/**
 * @summary Delete search
 */
export const searchDelete = (
    id: string,
 ) => {
      return instance<void>(
      {url: `/api/v2/searches/${id}`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Get search
 */
export const searchGet = (
    id: string,
 ) => {
      return instance<Search>(
      {url: `/api/v2/searches/${id}`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Abort search
 */
export const searchAbort = (
    id: string,
 ) => {
      return instance<void>(
      {url: `/api/v2/searches/${id}/abort`, method: 'POST'
    },
      );
    }
  
/**
 * @summary Download search results
 */
export const searchDownload = (
    id: string,
    params?: SearchDownloadParams,
 ) => {
      return instance<Blob>(
      {url: `/api/v2/searches/${id}/download`, method: 'GET',
        params,
        responseType: 'blob'
    },
      );
    }
  
/**
 * @summary Read search result records
 */
export const searchRecords = (
    id: string,
    params?: SearchRecordsParams,
 ) => {
      return instance<SearchRecordsPage>(
      {url: `/api/v2/searches/${id}/records`, method: 'GET',
        params
    },
      );
    }
  
export type BackupsHealthGetResult = NonNullable<Awaited<ReturnType<typeof backupsHealthGet>>>
export type DeletionsListResult = NonNullable<Awaited<ReturnType<typeof deletionsList>>>
export type DeletionGetResult = NonNullable<Awaited<ReturnType<typeof deletionGet>>>
export type DeletionRecordsListResult = NonNullable<Awaited<ReturnType<typeof deletionRecordsList>>>
export type RecordsLockResult = NonNullable<Awaited<ReturnType<typeof recordsLock>>>
export type RecordUnlockResult = NonNullable<Awaited<ReturnType<typeof recordUnlock>>>
export type RecordLockGetResult = NonNullable<Awaited<ReturnType<typeof recordLockGet>>>
export type RecordLockResult = NonNullable<Awaited<ReturnType<typeof recordLock>>>
export type RecordChildrenListResult = NonNullable<Awaited<ReturnType<typeof recordChildrenList>>>
export type RecordsUnlockResult = NonNullable<Awaited<ReturnType<typeof recordsUnlock>>>
export type ObjectsListResult = NonNullable<Awaited<ReturnType<typeof objectsList>>>
export type RecordGetResult = NonNullable<Awaited<ReturnType<typeof recordGet>>>
export type RecordVersionsListResult = NonNullable<Awaited<ReturnType<typeof recordVersionsList>>>
export type SearchesListResult = NonNullable<Awaited<ReturnType<typeof searchesList>>>
export type SearchCreateResult = NonNullable<Awaited<ReturnType<typeof searchCreate>>>
export type SearchDeleteResult = NonNullable<Awaited<ReturnType<typeof searchDelete>>>
export type SearchGetResult = NonNullable<Awaited<ReturnType<typeof searchGet>>>
export type SearchAbortResult = NonNullable<Awaited<ReturnType<typeof searchAbort>>>
export type SearchDownloadResult = NonNullable<Awaited<ReturnType<typeof searchDownload>>>
export type SearchRecordsResult = NonNullable<Awaited<ReturnType<typeof searchRecords>>>
