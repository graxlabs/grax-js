/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * GRAX API
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type SearchRecordsParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * Search records in reverse order.
 */
reverse?: boolean;
/**
 * Minimum record time to include in the response.
 */
minTime?: string;
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type SearchDownloadParams = {
/**
 * Fields to include in the response. If not specified, all fields are included.
 */
fields?: string;
/**
 * Whether to download the latest version of each record.
 */
latest?: boolean;
};

export type SearchesListParams = {
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordVersionsListParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordGetParams = {
/**
 * Fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
};

export type ObjectsListParams = {
/**
 * Maximum number of items to return per page. Fewer or zero may be returned.
 */
maxItems?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordsUnlockBody = {
  ids?: string[] | null;
};

export type RecordChildrenListParams = {
/**
 * The child object to list.
 */
object?: string;
/**
 * The fields to include in the response. Can be 'all' for all fields, 'name' for the name field, or a comma separated list of field names.
 */
fields?: string;
/**
 * The delete source to filter by, can be 'any', 'grax' or 'salesforce'.
 */
deleteSource?: string;
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type RecordsLockBody = {
  ids?: RecordLockID[] | null;
};

export type DeletionRecordsListParams = {
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type DeletionsListParams = {
/**
 * Minimum created time, inclusive.
 */
min?: string;
/**
 * Maximum created time, exclusive.
 */
max?: string;
/**
 * Object name. If provided, only deletions for this object will be returned.
 */
object?: string;
/**
 * Maximum number of results to return per page.
 */
pageSize?: number;
/**
 * Token returned by previous call to retrieve the subsequent page.
 */
pageToken?: string;
};

export type BackupsHealthGetParams = {
/**
 * Maximum time behind before the backups are considered unhealthy, in seconds.
 */
maxBehind?: number;
};

export interface SearchesPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  searches?: Search[];
}

export interface SearchRecordsPage {
  /** Token to retrieve the next page of running search results. */
  nextContinuePageToken?: string;
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  records?: SearchRecord[];
}

export interface SearchLimits {
  /** Stop search after this many results are found. */
  results?: number;
}

/**
 * Mode of the filter. 'and' requires all child and field filters match, 'or' only requires one.
 */
export type SearchFiltersMode = typeof SearchFiltersMode[keyof typeof SearchFiltersMode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchFiltersMode = {
  and: 'and',
  or: 'or',
} as const;

export interface SearchFieldFilter {
  field?: string;
  filterType?: string;
  not?: boolean;
  value?: string;
}

export interface SearchFilters {
  /** Child filters. */
  children?: SearchFilters[];
  /** Field filters. */
  fields?: SearchFieldFilter[];
  /** Mode of the filter. 'and' requires all child and field filters match, 'or' only requires one. */
  mode?: SearchFiltersMode;
}

export interface SearchCreate {
  filters?: SearchFilters;
  limits?: SearchLimits;
  /** Whether to notify when the search is complete. */
  notify?: boolean;
  /** Object to search. */
  object?: string;
  /** Whether to search in reverse order. */
  reverse?: boolean;
  /** Status of the records to search. */
  status?: string;
  /** Time field to search. Can be 'createdAt', 'modifiedAt', 'latestModifiedAt', 'rangeLatestModifiedAt', 'allModifiedAt', 'deletedAt' or 'purgedAt'. Defaults to 'createdAt'. */
  timeField?: string;
  /** Maximum time for the search. */
  timeFieldMax?: string;
  /** Minimum time for the search. */
  timeFieldMin?: string;
}

export interface Search {
  /** Time the search job was created. */
  created?: string;
  /** Time the search will be automatically deleted if its results are not accessed. */
  deleting?: string;
  filters?: SearchFilters;
  /** Status of the records to search. */
  filterStatus?: string;
  /** ID of the search job. */
  id?: string;
  limits?: SearchLimits;
  /** Name of the search job. */
  name?: string;
  /** Object searched. */
  object?: string;
  /** Progress of the search job. */
  progress?: number;
  /** Number of records found. */
  recordsFound?: number;
  /** Number of records scanned. */
  recordsScanned?: number;
  /** Time of the first found record. */
  recordsTimeFirst?: string;
  /** Time of the last found record. */
  recordsTimeLast?: string;
  /** Whether records were searched in reverse order. */
  reverse?: boolean;
  /** Status of the search job. */
  status?: string;
  /** Time field used for the search. Can be 'createdAt', 'modifiedAt', 'latestModifiedAt', 'rangeLatestModifiedAt', 'allModifiedAt', 'deletedAt' or 'purgedAt'. */
  timeField?: string;
  /** Maximum time for the search. */
  timeFieldMax?: string;
  /** Minimum time for the search. */
  timeFieldMin?: string;
  /** Time the search job was last updated. */
  updated?: string;
}

export interface RecordVersionsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** Record versions. */
  records?: Record[];
}

export interface RecordRestoredFrom {
  /** Activity ID that restored the record. */
  activityID?: string;
  /** Added time of the new record. */
  added?: string;
  /** ID of the original record. */
  id?: string;
  /** Modified time of the original record. */
  modified?: string;
  user?: AuditUser;
}

export interface RecordPurged {
  /** ID of the activity that purged the record. */
  activityID?: string;
  /** Time the record was purged. */
  time?: string;
  user?: AuditUser;
}

export interface RecordLockID {
  id?: string;
  note?: string;
}

export interface RecordLock {
  /** Time the record was locked. If not present, the record is not locked. */
  locked?: string;
  /** ID of the record causing this record to be locked */
  lockedID?: string;
  /** Note about the lock */
  note?: string;
  /** ID of the user who locked the record */
  userID?: string;
}

export interface RecordField {
  /** Field name. */
  name?: string;
  /** Field value. */
  value?: string;
}

/**
 * Source of the delete.
 */
export type RecordDeletedSource = typeof RecordDeletedSource[keyof typeof RecordDeletedSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordDeletedSource = {
  grax: 'grax',
  source: 'source',
} as const;

export interface RecordDeleted {
  /** ID of the activity that deleted the record. */
  activityID?: string;
  /** Source of the delete. */
  source?: RecordDeletedSource;
  /** Time the record was deleted. */
  time?: string;
  user?: AuditUser;
}

export interface SearchRecord {
  /** Time the record was created. */
  created?: string;
  deleted?: RecordDeleted;
  /** Record fields. */
  fields?: RecordField[];
  /** Record ID. */
  id?: string;
  /** Time the record was modified. */
  modified?: string;
  /** Record name. */
  name?: string;
  purged?: RecordPurged;
  restoredFrom?: RecordRestoredFrom;
  /** Salesforce URL for the record. */
  salesforceURL?: string;
}

export interface RecordChildrenPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  records?: ChildRecord[] | null;
}

export interface Record {
  deleted?: RecordDeleted;
  /** Record fields. */
  fields?: RecordField[];
  /** Record ID. */
  id?: string;
  /** Time the record was modified. */
  modified?: string;
  /** Record name. */
  name?: string;
  /** Object name. */
  object?: string;
  purged?: RecordPurged;
  restoredFrom?: RecordRestoredFrom;
  /** Salesforce URL for the record. */
  salesforceURL?: string;
}

export interface Object {
  /** Object label. */
  label?: string;
  /** Object name. */
  name?: string;
}

export interface ObjectsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  /** Objects. */
  objects?: Object[];
}

export interface ErrorBody {
  id?: string;
  message?: string;
}

export interface Error {
  error?: ErrorBody;
}

export interface DeletionsPage {
  deletions?: Deletion[] | null;
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
}

export interface DeletionRecord {
  id?: string;
  modifiedAt?: string;
  object?: string;
  purgedAt?: string;
}

export interface DeletionRecordsPage {
  /** Token to retrieve the next page of results, blank if done. */
  nextPageToken?: string;
  records?: DeletionRecord[] | null;
}

export type DeletionCallerHeaders = {[key: string]: string[]};

export interface DeletionCaller {
  headers?: DeletionCallerHeaders;
  remoteAddr?: string;
  userID?: string;
}

export interface Deletion {
  caller?: DeletionCaller;
  cascade?: boolean;
  createdAt?: string;
  forceCascadeObjects?: string[];
  id?: string;
  object?: string;
  skipDeletedCheck?: boolean;
}

/**
 * The fields of the record, if requested.
 */
export type ChildRecordFields = {[key: string]: string};

export interface ChildRecord {
  /** The time the record was deleted, if it has been deleted. */
  deletedAt?: string;
  /** The delete source of the record, if it has been deleted. Can be 'grax' or 'salesforce'. */
  deleteSource?: string;
  /** The fields of the record, if requested. */
  fields?: ChildRecordFields;
  /** The ID of the record. */
  id?: string;
  /** The time the record was last modified. */
  modifiedAt?: string;
  /** The name of the record, if requested. */
  name?: string;
  /** The object of the record. */
  object?: string;
  /** The Salesforce URL of the record. */
  salesforceURL?: string;
}

export type BackupsHealthStatus = typeof BackupsHealthStatus[keyof typeof BackupsHealthStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BackupsHealthStatus = {
  ok: 'ok',
  warning: 'warning',
  error: 'error',
  unknown: 'unknown',
} as const;

export interface BackupsHealth {
  status?: BackupsHealthStatus;
}

export interface AuditUser {
  /** The email of the user. */
  email?: string;
  /** The ID of the user. */
  id?: string;
  /** The username of the user. */
  name?: string;
}





  /**
 * Get the health of Auto Backup.
 * @summary Get Auto Backup health
 */
export const backupsHealthGet = <TData = AxiosResponse<BackupsHealth>>(
    params?: BackupsHealthGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/backups/health`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary List Delete Forever deletions
 */
export const deletionsList = <TData = AxiosResponse<DeletionsPage>>(
    orgID: string,
    params?: DeletionsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/salesforce/${orgID}/deletions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get Delete Forever deletion
 */
export const deletionGet = <TData = AxiosResponse<Deletion>>(
    orgID: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/salesforce/${orgID}/deletions/${id}`,options
    );
  }

/**
 * @summary List Delete Forever deletion records
 */
export const deletionRecordsList = <TData = AxiosResponse<DeletionRecordsPage>>(
    orgID: string,
    id: string,
    params?: DeletionRecordsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/salesforce/${orgID}/deletions/${id}/records`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Lock multiple records
 */
export const recordsLock = <TData = AxiosResponse<void>>(
    orgID: string,
    object: string,
    recordsLockBody: RecordsLockBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v1/salesforce/${orgID}/objects/${object}/lock`,
      recordsLockBody,options
    );
  }

/**
 * @summary Unlock single record
 */
export const recordUnlock = <TData = AxiosResponse<void>>(
    orgID: string,
    object: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`,options
    );
  }

/**
 * @summary Get record lock
 */
export const recordLockGet = <TData = AxiosResponse<RecordLock>>(
    orgID: string,
    object: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`,options
    );
  }

/**
 * @summary Lock single record
 */
export const recordLock = <TData = AxiosResponse<void>>(
    orgID: string,
    object: string,
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/lock`,undefined,options
    );
  }

/**
 * @summary List record children
 */
export const recordChildrenList = <TData = AxiosResponse<RecordChildrenPage>>(
    orgID: string,
    object: string,
    id: string,
    mod: string,
    params?: RecordChildrenListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v1/salesforce/${orgID}/objects/${object}/records/${id}/versions/${mod}/children`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Unlock multiple records
 */
export const recordsUnlock = <TData = AxiosResponse<void>>(
    orgID: string,
    object: string,
    recordsUnlockBody: RecordsUnlockBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v1/salesforce/${orgID}/objects/${object}/unlock`,
      recordsUnlockBody,options
    );
  }

/**
 * @summary List objects
 */
export const objectsList = <TData = AxiosResponse<ObjectsPage>>(
    params?: ObjectsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/objects`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Get record
 */
export const recordGet = <TData = AxiosResponse<Record>>(
    object: string,
    id: string,
    params?: RecordGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/objects/${object}/records/${id}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary List record versions
 */
export const recordVersionsList = <TData = AxiosResponse<RecordVersionsPage>>(
    object: string,
    id: string,
    params?: RecordVersionsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/objects/${object}/records/${id}/versions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary List searches
 */
export const searchesList = <TData = AxiosResponse<SearchesPage>>(
    params?: SearchesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/searches`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Create search
 */
export const searchCreate = <TData = AxiosResponse<Search>>(
    searchCreate: SearchCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v2/searches`,
      searchCreate,options
    );
  }

/**
 * @summary Delete search
 */
export const searchDelete = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/api/v2/searches/${id}`,options
    );
  }

/**
 * @summary Get search
 */
export const searchGet = <TData = AxiosResponse<Search>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/searches/${id}`,options
    );
  }

/**
 * @summary Abort search
 */
export const searchAbort = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/api/v2/searches/${id}/abort`,undefined,options
    );
  }

/**
 * @summary Download search results
 */
export const searchDownload = <TData = AxiosResponse<Blob>>(
    id: string,
    params?: SearchDownloadParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/searches/${id}/download`,{
        responseType: 'blob',
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Read search result records
 */
export const searchRecords = <TData = AxiosResponse<SearchRecordsPage>>(
    id: string,
    params?: SearchRecordsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/api/v2/searches/${id}/records`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

export type BackupsHealthGetResult = AxiosResponse<BackupsHealth>
export type DeletionsListResult = AxiosResponse<DeletionsPage>
export type DeletionGetResult = AxiosResponse<Deletion>
export type DeletionRecordsListResult = AxiosResponse<DeletionRecordsPage>
export type RecordsLockResult = AxiosResponse<void>
export type RecordUnlockResult = AxiosResponse<void>
export type RecordLockGetResult = AxiosResponse<RecordLock>
export type RecordLockResult = AxiosResponse<void>
export type RecordChildrenListResult = AxiosResponse<RecordChildrenPage>
export type RecordsUnlockResult = AxiosResponse<void>
export type ObjectsListResult = AxiosResponse<ObjectsPage>
export type RecordGetResult = AxiosResponse<Record>
export type RecordVersionsListResult = AxiosResponse<RecordVersionsPage>
export type SearchesListResult = AxiosResponse<SearchesPage>
export type SearchCreateResult = AxiosResponse<Search>
export type SearchDeleteResult = AxiosResponse<void>
export type SearchGetResult = AxiosResponse<Search>
export type SearchAbortResult = AxiosResponse<void>
export type SearchDownloadResult = AxiosResponse<Blob>
export type SearchRecordsResult = AxiosResponse<SearchRecordsPage>
