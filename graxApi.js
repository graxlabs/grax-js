"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchRecords = exports.searchDownload = exports.searchAbort = exports.searchGet = exports.searchDelete = exports.searchCreate = exports.searchesList = exports.recordVersionsList = exports.recordGet = exports.objectsList = exports.recordsUnlock = exports.recordChildrenList = exports.recordLock = exports.recordLockGet = exports.recordUnlock = exports.recordsLock = exports.deletionRecordsList = exports.deletionGet = exports.deletionsList = exports.backupsHealthGet = exports.BackupsHealthStatus = exports.RecordDeletedSource = exports.SearchFiltersMode = void 0;
/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * GRAX API
 * OpenAPI spec version: 0.0.1
 */
var instance_1 = require("./instance");
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.SearchFiltersMode = {
    and: 'and',
    or: 'or',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.RecordDeletedSource = {
    grax: 'grax',
    source: 'source',
};
// eslint-disable-next-line @typescript-eslint/no-redeclare
exports.BackupsHealthStatus = {
    ok: 'ok',
    warning: 'warning',
    error: 'error',
    unknown: 'unknown',
};
/**
* Get the health of Auto Backup.
* @summary Get Auto Backup health
*/
var backupsHealthGet = function (params) {
    return (0, instance_1.instance)({ url: "/api/v1/backups/health", method: 'GET', params: params
    });
};
exports.backupsHealthGet = backupsHealthGet;
/**
 * @summary List Delete Forever deletions
 */
var deletionsList = function (orgID, params) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/deletions"), method: 'GET', params: params
    });
};
exports.deletionsList = deletionsList;
/**
 * @summary Get Delete Forever deletion
 */
var deletionGet = function (orgID, id) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/deletions/").concat(id), method: 'GET' });
};
exports.deletionGet = deletionGet;
/**
 * @summary List Delete Forever deletion records
 */
var deletionRecordsList = function (orgID, id, params) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/deletions/").concat(id, "/records"), method: 'GET', params: params
    });
};
exports.deletionRecordsList = deletionRecordsList;
/**
 * @summary Lock multiple records
 */
var recordsLock = function (orgID, object, recordsLockBody) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/lock"), method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: recordsLockBody });
};
exports.recordsLock = recordsLock;
/**
 * @summary Unlock single record
 */
var recordUnlock = function (orgID, object, id) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/records/").concat(id, "/lock"), method: 'DELETE' });
};
exports.recordUnlock = recordUnlock;
/**
 * @summary Get record lock
 */
var recordLockGet = function (orgID, object, id) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/records/").concat(id, "/lock"), method: 'GET' });
};
exports.recordLockGet = recordLockGet;
/**
 * @summary Lock single record
 */
var recordLock = function (orgID, object, id) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/records/").concat(id, "/lock"), method: 'POST' });
};
exports.recordLock = recordLock;
/**
 * @summary List record children
 */
var recordChildrenList = function (orgID, object, id, mod, params) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/records/").concat(id, "/versions/").concat(mod, "/children"), method: 'GET', params: params
    });
};
exports.recordChildrenList = recordChildrenList;
/**
 * @summary Unlock multiple records
 */
var recordsUnlock = function (orgID, object, recordsUnlockBody) {
    return (0, instance_1.instance)({ url: "/api/v1/salesforce/".concat(orgID, "/objects/").concat(object, "/unlock"), method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: recordsUnlockBody });
};
exports.recordsUnlock = recordsUnlock;
/**
 * @summary List objects
 */
var objectsList = function (params) {
    return (0, instance_1.instance)({ url: "/api/v2/objects", method: 'GET', params: params
    });
};
exports.objectsList = objectsList;
/**
 * @summary Get record
 */
var recordGet = function (object, id, params) {
    return (0, instance_1.instance)({ url: "/api/v2/objects/".concat(object, "/records/").concat(id), method: 'GET', params: params
    });
};
exports.recordGet = recordGet;
/**
 * @summary List record versions
 */
var recordVersionsList = function (object, id, params) {
    return (0, instance_1.instance)({ url: "/api/v2/objects/".concat(object, "/records/").concat(id, "/versions"), method: 'GET', params: params
    });
};
exports.recordVersionsList = recordVersionsList;
/**
 * @summary List searches
 */
var searchesList = function (params) {
    return (0, instance_1.instance)({ url: "/api/v2/searches", method: 'GET', params: params
    });
};
exports.searchesList = searchesList;
/**
 * @summary Create search
 */
var searchCreate = function (searchCreate) {
    return (0, instance_1.instance)({ url: "/api/v2/searches", method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: searchCreate });
};
exports.searchCreate = searchCreate;
/**
 * @summary Delete search
 */
var searchDelete = function (id) {
    return (0, instance_1.instance)({ url: "/api/v2/searches/".concat(id), method: 'DELETE' });
};
exports.searchDelete = searchDelete;
/**
 * @summary Get search
 */
var searchGet = function (id) {
    return (0, instance_1.instance)({ url: "/api/v2/searches/".concat(id), method: 'GET' });
};
exports.searchGet = searchGet;
/**
 * @summary Abort search
 */
var searchAbort = function (id) {
    return (0, instance_1.instance)({ url: "/api/v2/searches/".concat(id, "/abort"), method: 'POST' });
};
exports.searchAbort = searchAbort;
/**
 * @summary Download search results
 */
var searchDownload = function (id, params) {
    return (0, instance_1.instance)({ url: "/api/v2/searches/".concat(id, "/download"), method: 'GET', params: params, responseType: 'blob' });
};
exports.searchDownload = searchDownload;
/**
 * @summary Read search result records
 */
var searchRecords = function (id, params) {
    return (0, instance_1.instance)({ url: "/api/v2/searches/".concat(id, "/records"), method: 'GET', params: params
    });
};
exports.searchRecords = searchRecords;
